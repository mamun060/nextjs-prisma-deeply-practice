
======================Comparison Operators======================
Comparison Operators:

1. equals: Matches values that are equal to the specified value.
2. not: Negates the condition, matching values that are not equal to the specified value.
3. in: Matches values that are in a specified array of values.
4. notIn: Matches values that are not in a specified array of values.
5. lt (Less Than): Matches values that are less than the specified value.
6. lte (Less Than or Equal To): Matches values that are less than or equal to the specified value.
7. gt (Greater Than): Matches values that are greater than the specified value.
8. gte (Greater Than or Equal To): Matches values that are greater than or equal to the specified value.
9. contains: Matches values that contain a specified substring.
10. startsWith: Matches values that start with a specified substring.
11. endsWith: Matches values that end with a specified substring.



const result = await prisma.Employee.findMany({
    where:{salary:{equals:75000}}
})

const result = await prisma.Employee.findMany({
    where:{salary:{lt:75000}}
})

const result = await prisma.Employee.findMany({
    where:{salary:{lte:75000}}
})

const result = await prisma.Employee.findMany({
    where:{salary:{gt:75000}}
})

const result = await prisma.Employee.findMany({
    where:{salary:{gte:75000}}
})

const result = await prisma.Employee.findMany({
    where:{salary:{not:75000}}
})

const result = await prisma.Employee.findMany({
    where:{salary:{in:[75000,60000]}}
})

const result = await prisma.Employee.findMany({
    where:{salary:{notIn:[75000,60000]}}
})


const result = await prisma.Employee.findMany({
    where:{name:{contains:'John'}}
})

const result = await prisma.Employee.findMany({
      where:{name:{startsWith:'J'}}
})


const result = await prisma.Employee.findMany({
      where:{name:{endsWith:'n'}}
})


======================Logical Operators======================

1. AND: Combines multiple conditions with logical AND.
2. OR: Combines multiple conditions with logical OR.
3. NOT: Negates a condition.


const result = await prisma.Employee.findMany({
    where:{
         AND: [
              { name: {contains:"Alice"} },
              { salary: { gt: 50000 } }
           ]
     }
})

const result = await prisma.Employee.findMany({
    where:{
         OR: [
              { name: {contains:"Alice"} },
              { salary: { gt: 50000 } }
           ]
     }
})

const result = await prisma.Employee.findMany({
     where:{
          NOT:[
               { name: {contains:"Alice"} },
               { salary: { gt: 90000 } }
          ]
      }
})



====================== Date Operators =============================

1. lt (Less Than): Matches dates that are before the specified date.
2. lte (Less Than or Equal To): Matches dates that are on or before the specified date.
3. gt (Greater Than): Matches dates that are after the specified date.
4. gte (Greater Than or Equal To): Matches dates that are on or after the specified date.

        const result=await prisma.Employee.findMany({
            where:{
                birthDay:{
                    lt:new Date("2023-10-11"),
                    gt:new Date("2017-10-11")
                }
            }
        });